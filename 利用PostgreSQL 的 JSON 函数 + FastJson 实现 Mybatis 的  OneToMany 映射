<pre>
巧妙地利用 PostgreSQL的 JSON 动态实现 1:N 的映射,
而且可以完全在 Mapper的 Java Class 中使用 Annotation 实现, 无需使用 Mapper XML 做配置,
且无需像 Mapper XML 配置对于1多多要做 Resultset 的字段映射,因为 FastJson 会智能地做字段映射.

1. PostgreSQL SQL模板:
select 主表.*, 
coalesce((select to_json(array_agg(row_to_json(_))) from (select * from 子表 where 子表FK=主表PK) _),‘[]’) json_data from 主表 where …

例如:
select u.*
coalesce((select to_json(array_agg(row_to_json(_))) from (select * from user_roles r where r.user_id=u.id) _),‘[]’) json_user_roles from users where u.xxx=xxx ....

2. In Mybatis Mapper (这里使用了 MyBatisPlus ):

public interface UserMapper extends BaseMapper<User> {
	@Select(
			"select u.*, coalesce((select to_json(array_agg(row_to_json(_))) from (select * from user_roles r where r.user_id=u.id) _),‘[]’) json_user_roles from users where u.xxx=xxx ...."
			)
	public IPage<User> getUserWithRoles(Page<User> page, xxxx);


3. In Domain Bean User.java:
写一个 setter, 利用 FastJson 把 json_user_roles 的值转换为 user.userRoles:

@Data
public class User {
  String name;
  ....
  
  // userRoles which is the OneToMany objects in User to Role relationship:
  List<Role> userRoles;
  
  public void setJsonUserRoles(String jsonData){
    //convert jsonData into List of Role:
    userRoles = JSONObject.parseArray(jsonData, Role.class);  
  }
}

-- the End.
